{"version":3,"sources":["../src/sleep.ts"],"names":["MAX_SAFE_VALUE","parseTime","time","parsedTime","sleep","timeout","value","Promise","resolve","setTimeout","rejectAfter","_","reject"],"mappings":";;;;;;;;AAAA;;;;AAQA,MAAMA,cAAc,GAAG,UAAvB;;AAMA,SAASC,SAAT,CAAmBC,IAAnB,EAAkD;AAChD,QAAMC,UAAU,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,iBAAGA,IAAH,CAArD;;AAEA,MAAIC,UAAU,GAAGH,cAAjB,EAAiC;AAC/B,WAAOA,cAAP;AACD;;AAED,SAAOG,UAAP;AACD;;AAOc,eAAeC,KAAf,CAA8BC,OAA9B,EAAwDC,KAAxD,EAAmE;AAChF,SAAO,IAAIC,OAAJ,CAAeC,OAAO,IAAI;AAC/BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACF,KAAD,CAAP;AACD,KAFS,EAEPL,SAAS,CAACI,OAAD,CAFF,CAAV;AAGD,GAJM,CAAP;AAKD;;AAOM,eAAeK,WAAf,CAAoCL,OAApC,EAA8DC,KAA9D,EAAyE;AAC9E,SAAO,IAAIC,OAAJ,CAAe,CAACI,CAAD,EAAIC,MAAJ,KAAe;AACnCH,IAAAA,UAAU,CAAC,MAAM;AACfG,MAAAA,MAAM,CAACN,KAAD,CAAN;AACD,KAFS,EAEPL,SAAS,CAACI,OAAD,CAFF,CAAV;AAGD,GAJM,CAAP;AAKD","sourcesContent":["import ms from 'ms';\n\n\n/**\n * Largest number that can be represented by a signed 32-bit integer. If any\n * value greater than this is passed to `setTimeout`, Node will issue a warning\n * and set the timeout value to 1ms.\n */\nconst MAX_SAFE_VALUE = 2147483647;\n\n\n/**\n * Accepts a string (ie: '5s', '20 seconds') and returns a number.\n */\nfunction parseTime(time: string | number): number {\n  const parsedTime = typeof time === 'number' ? time : ms(time);\n\n  if (parsedTime > MAX_SAFE_VALUE) {\n    return MAX_SAFE_VALUE;\n  }\n\n  return parsedTime;\n}\n\n\n/**\n * Returns a Promise that resolves after the provided delay. Delay may be\n * expressed as a number (of milliseconds) or as a string.\n */\nexport default async function sleep<T = any>(timeout: string | number, value?: T) {\n  return new Promise<T>(resolve => {\n    setTimeout(() => {\n      resolve(value);\n    }, parseTime(timeout));\n  });\n}\n\n\n/**\n * Returns a Promise that rejects after the provided timeout. Delay may be\n * expressed as a number (of milliseconds) or as a string.\n */\nexport async function rejectAfter<T = any>(timeout: string | number, value?: T) {\n  return new Promise<T>((_, reject) => {\n    setTimeout(() => {\n      reject(value);\n    }, parseTime(timeout));\n  });\n}\n"],"file":"sleep.js"}